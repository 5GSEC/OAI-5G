#!/bin/groovy
/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

// necessary for reading JSON
import groovy.json.JsonSlurper

// Template Jenkins Declarative Pipeline script to run Test w/ RF HW

// Location of the python executor node shall be in the same subnet as the others servers
def pythonExecutor = params.pythonExecutor

def TARGET_BRANCH = "develop"
def ALLOW_MERGE = true
def GitPostArgs = ''
def jobStatus

pipeline {
    agent {
        label pythonExecutor
    }
    stages {
        stage ("Launcher") {
            steps {
                script {
                    // retrieve MR that are opened nd with tag NSA
                    MR_LIST = sh returnStdout: true, script: 'curl --silent "https://gitlab.eurecom.fr/api/v4/projects/oai%2Fopenairinterface5g/merge_requests?state=opened&per_page=100&labels=NSA" | jq -cj "[.[].iid]"'
                    echo "List of selected MRs: ${MR_LIST.trim()}"
                    def MR_ARRAY = new JsonSlurper().parseText(MR_LIST.trim())
                    // for every selected MR, retrieve the branch name and the latest commit
                    for (MR in MR_ARRAY) {
                        SRC_BRANCH=sh returnStdout: true, script: """curl --silent "https://gitlab.eurecom.fr/api/v4/projects/oai%2Fopenairinterface5g/merge_requests/${MR}" | jq ".source_branch" || true """
                        SRC_BRANCH=SRC_BRANCH.trim()
                        COMMIT_ID=sh returnStdout: true, script:  """curl --silent "https://gitlab.eurecom.fr/api/v4/projects/oai%2Fopenairinterface5g/merge_requests/${MR}" | jq ".sha" || true """
                        COMMIT_ID=COMMIT_ID.trim()
                        echo "Testing NSA on : ${MR} ${SRC_BRANCH} ${COMMIT_ID}"
                        commit = COMMIT_ID.replace("\"","")
                        GitPostArgs = MR + ' ' + commit + ' '
                        echo GitPostArgs

                        //calling LTE 2x2
                        jobName = "RAN-LTE-2x2-Module-OAIEPC"
                        jobStatus =  build job: jobName, wait : true, propagate : false, parameters: [
                            string(name: 'eNB_MR', value: String.valueOf(MR)),
                            string(name: 'eNB_Branch', value: String.valueOf(SRC_BRANCH)),
                            string(name: 'eNB_CommitID', value: String.valueOf(COMMIT_ID)),
                            string(name: 'eNB_TargetBranch', value: String.valueOf(TARGET_BRANCH)),
                            booleanParam(name: 'eNB_mergeRequest', value: Boolean.valueOf(ALLOW_MERGE))
                        ]
                        jobResult = jobStatus.getResult()
                        build_url = jobStatus.getAbsoluteUrl()
                        build_id = jobStatus.getNumber().toString()
                        GitPostArgs += jobName + ' ' + build_url + ' ' + build_id + ' ' + jobResult + ' '
                        echo GitPostArgs

                        //calling NSA B200
                        jobName = "RAN-NSA-B200-Module-LTEBOX"
                        jobStatus =  build job: jobName, wait : true, propagate : false, parameters: [
                            string(name: 'eNB_MR', value: String.valueOf(MR)),
                            string(name: 'eNB_Branch', value: String.valueOf(SRC_BRANCH)),
                            string(name: 'eNB_CommitID', value: String.valueOf(COMMIT_ID)),
                            string(name: 'eNB_TargetBranch', value: String.valueOf(TARGET_BRANCH)),
                            booleanParam(name: 'eNB_mergeRequest', value: Boolean.valueOf(ALLOW_MERGE))
                        ]
                        jobResult = jobStatus.getResult()
                        build_url = jobStatus.getAbsoluteUrl()
                        build_id = jobStatus.getNumber().toString()
                        GitPostArgs += jobName + ' ' + build_url + ' ' + build_id + ' ' + jobResult + ' '
                        echo GitPostArgs

                        //calling NSA 2x2
                        jobName = "RAN-NSA-2x2-Module-OAIEPC"
                        jobStatus =  build job: jobName, wait : true, propagate : false, parameters: [
                            string(name: 'eNB_MR', value: String.valueOf(MR)),
                            string(name: 'eNB_Branch', value: String.valueOf(SRC_BRANCH)),
                            string(name: 'eNB_CommitID', value: String.valueOf(COMMIT_ID)),
                            string(name: 'eNB_TargetBranch', value: String.valueOf(TARGET_BRANCH)),
                            booleanParam(name: 'eNB_mergeRequest', value: Boolean.valueOf(ALLOW_MERGE))
                        ]
                        jobResult = jobStatus.getResult()
                        build_url = jobStatus.getAbsoluteUrl()
                        build_id = jobStatus.getNumber().toString()
                        GitPostArgs += jobName + ' ' + build_url + ' ' + build_id + ' ' + jobResult + ' '
                        echo GitPostArgs

                        //calling SA 
                        jobName = "RAN-SA-Module-CN5G"
                        jobStatus =  build job: jobName, wait : true, propagate : false, parameters: [
                            string(name: 'eNB_MR', value: String.valueOf(MR)),
                            string(name: 'eNB_Branch', value: String.valueOf(SRC_BRANCH)),
                            string(name: 'eNB_CommitID', value: String.valueOf(COMMIT_ID)),
                            string(name: 'eNB_TargetBranch', value: String.valueOf(TARGET_BRANCH)),
                            booleanParam(name: 'eNB_mergeRequest', value: Boolean.valueOf(ALLOW_MERGE))
                        ]
                        jobResult = jobStatus.getResult()
                        build_url = jobStatus.getAbsoluteUrl()
                        build_id = jobStatus.getNumber().toString()
                        GitPostArgs += jobName + ' ' + build_url + ' ' + build_id + ' ' + jobResult + ' '
                        echo GitPostArgs

                        //calling SA-AmariS
                        jobName = "RAN-SA-AmariS-CN5G"
                        jobStatus =  build job: jobName, wait : true, propagate : false, parameters: [
                            string(name: 'eNB_MR', value: String.valueOf(MR)),
                            string(name: 'eNB_Branch', value: String.valueOf(SRC_BRANCH)),
                            string(name: 'eNB_CommitID', value: String.valueOf(COMMIT_ID)),
                            string(name: 'eNB_TargetBranch', value: String.valueOf(TARGET_BRANCH)),
                            booleanParam(name: 'eNB_mergeRequest', value: Boolean.valueOf(ALLOW_MERGE))
                        ]
                        jobResult = jobStatus.getResult()
                        build_url = jobStatus.getAbsoluteUrl()
                        build_id = jobStatus.getNumber().toString()
                        GitPostArgs += jobName + ' ' + build_url + ' ' + build_id + ' ' + jobResult + ' '
                        echo GitPostArgs

                        //calling OAIUE N310-X300
                        jobName = "RAN-SA-OAIUE-N310-X300-CN5G"
                        jobStatus =  build job: jobName, wait : true, propagate : false, parameters: [
                            string(name: 'eNB_MR', value: String.valueOf(MR)),
                            string(name: 'eNB_Branch', value: String.valueOf(SRC_BRANCH)),
                            string(name: 'eNB_CommitID', value: String.valueOf(COMMIT_ID)),
                            string(name: 'eNB_TargetBranch', value: String.valueOf(TARGET_BRANCH)),
                            booleanParam(name: 'eNB_mergeRequest', value: Boolean.valueOf(ALLOW_MERGE))
                        ]
                        jobResult = jobStatus.getResult()
                        build_url = jobStatus.getAbsoluteUrl()
                        build_id = jobStatus.getNumber().toString()
                        GitPostArgs += jobName + ' ' + build_url + ' ' + build_id + ' ' + jobResult + ' '
                        echo GitPostArgs

                        //git report the test results in 1 block, at the end of the test sequence of one MR
                        dir ('ci-scripts/ran_dashboard') {
                            sh "python3 Hdashboard.py gitpost ${GitPostArgs}"
                        }                        
                    }
                }                                  
            }   
        }
    }
}


